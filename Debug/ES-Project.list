
ES-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f1c  08002f1c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f1c  08002f1c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f1c  08002f1c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f1c  08002f1c  00003f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f20  08002f20  00003f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002f30  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002f30  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa91  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b05  00000000  00000000  0000eac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000972  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113b5  00000000  00000000  00011b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea86  00000000  00000000  00022f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069e73  00000000  00000000  0003198d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  0009b844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0009e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002eb4 	.word	0x08002eb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002eb4 	.word	0x08002eb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <lcd_send_cmd>:
#include "i2c_lcd.h"
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x4E) // change this according to ur setup

void lcd_send_cmd (char cmd){
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	@ 0x24
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[8];
	data_u = (cmd&0xf0);
 800022c:	2017      	movs	r0, #23
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<8)&0xf0);
 800023a:	2416      	movs	r4, #22
 800023c:	193b      	adds	r3, r7, r4
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000242:	183b      	adds	r3, r7, r0
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	220c      	movs	r2, #12
 8000248:	4313      	orrs	r3, r2
 800024a:	b2da      	uxtb	r2, r3
 800024c:	210c      	movs	r1, #12
 800024e:	187b      	adds	r3, r7, r1
 8000250:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000252:	183b      	adds	r3, r7, r0
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2208      	movs	r2, #8
 8000258:	4313      	orrs	r3, r2
 800025a:	b2da      	uxtb	r2, r3
 800025c:	187b      	adds	r3, r7, r1
 800025e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	193b      	adds	r3, r7, r4
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	220c      	movs	r2, #12
 8000266:	4313      	orrs	r3, r2
 8000268:	b2da      	uxtb	r2, r3
 800026a:	187b      	adds	r3, r7, r1
 800026c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026e:	193b      	adds	r3, r7, r4
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2208      	movs	r2, #8
 8000274:	4313      	orrs	r3, r2
 8000276:	b2da      	uxtb	r2, r3
 8000278:	187b      	adds	r3, r7, r1
 800027a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800027c:	187a      	adds	r2, r7, r1
 800027e:	4805      	ldr	r0, [pc, #20]	@ (8000294 <lcd_send_cmd+0x74>)
 8000280:	2364      	movs	r3, #100	@ 0x64
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2304      	movs	r3, #4
 8000286:	214e      	movs	r1, #78	@ 0x4e
 8000288:	f000 ffac 	bl	80011e4 <HAL_I2C_Master_Transmit>
}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b007      	add	sp, #28
 8000292:	bd90      	pop	{r4, r7, pc}
 8000294:	20000028 	.word	0x20000028

08000298 <lcd_send_data>:

void lcd_send_data (char data){
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b087      	sub	sp, #28
 800029c:	af02      	add	r7, sp, #8
 800029e:	0002      	movs	r2, r0
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002a4:	200f      	movs	r0, #15
 80002a6:	183b      	adds	r3, r7, r0
 80002a8:	1dfa      	adds	r2, r7, #7
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	210f      	movs	r1, #15
 80002ae:	438a      	bics	r2, r1
 80002b0:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	011a      	lsls	r2, r3, #4
 80002b8:	240e      	movs	r4, #14
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80002be:	183b      	adds	r3, r7, r0
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	220d      	movs	r2, #13
 80002c4:	4313      	orrs	r3, r2
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	2108      	movs	r1, #8
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80002ce:	183b      	adds	r3, r7, r0
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2209      	movs	r2, #9
 80002d4:	4313      	orrs	r3, r2
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	220d      	movs	r2, #13
 80002e2:	4313      	orrs	r3, r2
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2209      	movs	r2, #9
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f8:	187a      	adds	r2, r7, r1
 80002fa:	4805      	ldr	r0, [pc, #20]	@ (8000310 <lcd_send_data+0x78>)
 80002fc:	2364      	movs	r3, #100	@ 0x64
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2304      	movs	r3, #4
 8000302:	214e      	movs	r1, #78	@ 0x4e
 8000304:	f000 ff6e 	bl	80011e4 <HAL_I2C_Master_Transmit>
}
 8000308:	46c0      	nop			@ (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b005      	add	sp, #20
 800030e:	bd90      	pop	{r4, r7, pc}
 8000310:	20000028 	.word	0x20000028

08000314 <lcd_clear>:

void lcd_clear (void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ff80 	bl	8000220 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	e005      	b.n	8000332 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000326:	2020      	movs	r0, #32
 8000328:	f7ff ffb6 	bl	8000298 <lcd_send_data>
	for (int i=0; i<100; i++)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b63      	cmp	r3, #99	@ 0x63
 8000336:	ddf6      	ble.n	8000326 <lcd_clear+0x12>
	}
}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b002      	add	sp, #8
 8000340:	bd80      	pop	{r7, pc}

08000342 <lcd_put_cur>:
void lcd_put_cur (int row, int col){
 8000342:	b580      	push	{r7, lr}
 8000344:	b082      	sub	sp, #8
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	6039      	str	r1, [r7, #0]
	switch (row)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <lcd_put_cur+0x18>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d005      	beq.n	8000364 <lcd_put_cur+0x22>
 8000358:	e009      	b.n	800036e <lcd_put_cur+0x2c>
	{
	case 0:
		col |= 0x80;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	4313      	orrs	r3, r2
 8000360:	603b      	str	r3, [r7, #0]
		break;
 8000362:	e004      	b.n	800036e <lcd_put_cur+0x2c>
	case 1:
		col |=0xC0;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	22c0      	movs	r2, #192	@ 0xc0
 8000368:	4313      	orrs	r3, r2
 800036a:	603b      	str	r3, [r7, #0]
		break;
 800036c:	46c0      	nop			@ (mov r8, r8)
	}
	lcd_send_cmd(col);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff ff54 	bl	8000220 <lcd_send_cmd>
}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}

08000380 <lcd_init>:
void lcd_init (void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(100);  // wait for >40ms
 8000384:	2064      	movs	r0, #100	@ 0x64
 8000386:	f000 fc05 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x30);
 800038a:	2030      	movs	r0, #48	@ 0x30
 800038c:	f7ff ff48 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);  // wait for >4.1ms
 8000390:	200a      	movs	r0, #10
 8000392:	f000 fbff 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000396:	2030      	movs	r0, #48	@ 0x30
 8000398:	f7ff ff42 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(100);  // wait for >100us
 800039c:	2064      	movs	r0, #100	@ 0x64
 800039e:	f000 fbf9 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003a2:	2030      	movs	r0, #48	@ 0x30
 80003a4:	f7ff ff3c 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003a8:	200a      	movs	r0, #10
 80003aa:	f000 fbf3 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003ae:	2020      	movs	r0, #32
 80003b0:	f7ff ff36 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003b4:	200a      	movs	r0, #10
 80003b6:	f000 fbed 	bl	8000b94 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x3C); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003ba:	203c      	movs	r0, #60	@ 0x3c
 80003bc:	f7ff ff30 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fbe7 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003c6:	2008      	movs	r0, #8
 80003c8:	f7ff ff2a 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f000 fbe1 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ff24 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fbdb 	bl	8000b94 <HAL_Delay>
	HAL_Delay(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fbd8 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x07); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003e4:	2007      	movs	r0, #7
 80003e6:	f7ff ff1b 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 fbd2 	bl	8000b94 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003f0:	200c      	movs	r0, #12
 80003f2:	f7ff ff15 	bl	8000220 <lcd_send_cmd>
}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000404:	e006      	b.n	8000414 <lcd_send_string+0x18>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	0018      	movs	r0, r3
 8000410:	f7ff ff42 	bl	8000298 <lcd_send_data>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f4      	bne.n	8000406 <lcd_send_string+0xa>
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <activate_buzzer>:
/* USER CODE BEGIN 0 */

/**
 * @brief Activate the buzzer and ensure the RED LED stays ON.
 */
void activate_buzzer(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Keep RED LED ON
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <activate_buzzer+0x20>)
 800042e:	2201      	movs	r2, #1
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fe13 	bl	800105e <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Start PWM for buzzer
 8000438:	4b04      	ldr	r3, [pc, #16]	@ (800044c <activate_buzzer+0x24>)
 800043a:	2108      	movs	r1, #8
 800043c:	0018      	movs	r0, r3
 800043e:	f001 ffa9 	bl	8002394 <HAL_TIM_PWM_Start>
    // Add code to activate the buzzer if needed
}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	48000400 	.word	0x48000400
 800044c:	2000007c 	.word	0x2000007c

08000450 <deactivate_buzzer>:

/**
 * @brief Deactivate the buzzer while ensuring the RED LED stays ON.
 */
void deactivate_buzzer(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Keep RED LED OFF
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <deactivate_buzzer+0x20>)
 8000456:	2200      	movs	r2, #0
 8000458:	2180      	movs	r1, #128	@ 0x80
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fdff 	bl	800105e <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); // Stop PWM for buzzer
 8000460:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <deactivate_buzzer+0x24>)
 8000462:	2108      	movs	r1, #8
 8000464:	0018      	movs	r0, r3
 8000466:	f002 f84d 	bl	8002504 <HAL_TIM_PWM_Stop>
    // Add code to deactivate the buzzer if needed
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	48000400 	.word	0x48000400
 8000474:	2000007c 	.word	0x2000007c

08000478 <set_system_state>:

/**
 * @brief Update the system state on the LCD and LEDs.
 * @param is_open: 1 if the system is "ON" (open), 0 if "OFF" (closed).
 */
void set_system_state(uint8_t is_open) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	701a      	strb	r2, [r3, #0]
	lcd_init();
 8000484:	f7ff ff7c 	bl	8000380 <lcd_init>
    lcd_clear();
 8000488:	f7ff ff44 	bl	8000314 <lcd_clear>
    lcd_put_cur(0, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff57 	bl	8000342 <lcd_put_cur>
    lcd_clear();
 8000494:	f7ff ff3e 	bl	8000314 <lcd_clear>

    if (is_open) {
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d016      	beq.n	80004ce <set_system_state+0x56>


       	lcd_put_cur(0, 0);
 80004a0:	2100      	movs	r1, #0
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff ff4d 	bl	8000342 <lcd_put_cur>
        lcd_send_string("Door is open");
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <set_system_state+0x98>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff ffa6 	bl	80003fc <lcd_send_string>
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // RED LED ON
 80004b0:	4b18      	ldr	r3, [pc, #96]	@ (8000514 <set_system_state+0x9c>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fdd1 	bl	800105e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // GREEN LED OFF
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <set_system_state+0x9c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	2140      	movs	r1, #64	@ 0x40
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fdcb 	bl	800105e <HAL_GPIO_WritePin>
        activate_buzzer();
 80004c8:	f7ff ffae 	bl	8000428 <activate_buzzer>
 80004cc:	e015      	b.n	80004fa <set_system_state+0x82>
    } else {

       	lcd_put_cur(0, 0);
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff ff36 	bl	8000342 <lcd_put_cur>
        lcd_send_string("Door is closed");
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <set_system_state+0xa0>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ff8f 	bl	80003fc <lcd_send_string>
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // RED LED OFF
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <set_system_state+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	2180      	movs	r1, #128	@ 0x80
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fdba 	bl	800105e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // GREEN LED ON
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <set_system_state+0x9c>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	2140      	movs	r1, #64	@ 0x40
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fdb4 	bl	800105e <HAL_GPIO_WritePin>
        deactivate_buzzer();
 80004f6:	f7ff ffab 	bl	8000450 <deactivate_buzzer>
    }

    HAL_Delay(500);
 80004fa:	23fa      	movs	r3, #250	@ 0xfa
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fb48 	bl	8000b94 <HAL_Delay>
    lcd_clear();
 8000504:	f7ff ff06 	bl	8000314 <lcd_clear>
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}
 8000510:	08002ecc 	.word	0x08002ecc
 8000514:	48000400 	.word	0x48000400
 8000518:	08002edc 	.word	0x08002edc

0800051c <handle_sensor_state>:


/**
 * @brief Handle the state of the reed switch and update the system accordingly.
 */
void handle_sensor_state(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(REED_SWITCH_GPIO_Port, REED_SWITCH_Pin) == GPIO_PIN_SET) {
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <handle_sensor_state+0x28>)
 8000522:	2120      	movs	r1, #32
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fd7d 	bl	8001024 <HAL_GPIO_ReadPin>
 800052a:	0003      	movs	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d103      	bne.n	8000538 <handle_sensor_state+0x1c>
        // Sensor detects a signal (door/window is open)
        set_system_state(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ffa1 	bl	8000478 <set_system_state>
    } else {
        // Sensor does not detect a signal (door/window is closed)
        set_system_state(0);
    }
}
 8000536:	e002      	b.n	800053e <handle_sensor_state+0x22>
        set_system_state(0);
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff ff9d 	bl	8000478 <set_system_state>
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	48000400 	.word	0x48000400

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fabe 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f814 	bl	800057c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start_IT(&htim1); // Start TIM1 in interrupt mode
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <main+0x30>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fe7a 	bl	8002250 <HAL_TIM_Base_Start_IT>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f930 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000560:	f000 f854 	bl	800060c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000564:	f000 f892 	bl	800068c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Start TIM1 in interrupt mode
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <main+0x30>)
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fe70 	bl	8002250 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  handle_sensor_state();
 8000570:	f7ff ffd4 	bl	800051c <handle_sensor_state>
 8000574:	e7fc      	b.n	8000570 <main+0x28>
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	2000007c 	.word	0x2000007c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b091      	sub	sp, #68	@ 0x44
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	2410      	movs	r4, #16
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2330      	movs	r3, #48	@ 0x30
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fc65 	bl	8002e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	003b      	movs	r3, r7
 8000594:	0018      	movs	r0, r3
 8000596:	2310      	movs	r3, #16
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 fc5e 	bl	8002e5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	0021      	movs	r1, r4
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2201      	movs	r2, #1
 80005ac:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2202      	movs	r2, #2
 80005b2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	0252      	lsls	r2, r2, #9
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	0352      	lsls	r2, r2, #13
 80005c2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa01 	bl	80019d4 <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d6:	f000 f959 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	003b      	movs	r3, r7
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2202      	movs	r2, #2
 80005e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	003b      	movs	r3, r7
 80005f4:	2101      	movs	r1, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fd06 	bl	8002008 <HAL_RCC_ClockConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000600:	f000 f944 	bl	800088c <Error_Handler>
  }
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b011      	add	sp, #68	@ 0x44
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <MX_I2C2_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000618:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <MX_I2C2_Init+0x7c>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000624:	2201      	movs	r2, #1
 8000626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_I2C2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fd25 	bl	8001098 <HAL_I2C_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 f91b 	bl	800088c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <MX_I2C2_Init+0x74>)
 8000658:	2100      	movs	r1, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f922 	bl	80018a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000664:	f000 f912 	bl	800088c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <MX_I2C2_Init+0x74>)
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f965 	bl	800193c <HAL_I2CEx_ConfigDigitalFilter>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f909 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40005800 	.word	0x40005800
 8000688:	10805d88 	.word	0x10805d88

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	2340      	movs	r3, #64	@ 0x40
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	2308      	movs	r3, #8
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fbdd 	bl	8002e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	2324      	movs	r3, #36	@ 0x24
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	0018      	movs	r0, r3
 80006a8:	231c      	movs	r3, #28
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f002 fbd5 	bl	8002e5c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2320      	movs	r3, #32
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 fbce 	bl	8002e5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c0:	4b3a      	ldr	r3, [pc, #232]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006c2:	4a3b      	ldr	r2, [pc, #236]	@ (80007b0 <MX_TIM1_Init+0x124>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 80006c6:	4b39      	ldr	r3, [pc, #228]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006c8:	4a3a      	ldr	r2, [pc, #232]	@ (80007b4 <MX_TIM1_Init+0x128>)
 80006ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b37      	ldr	r3, [pc, #220]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15000;
 80006d2:	4b36      	ldr	r3, [pc, #216]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006d4:	4a38      	ldr	r2, [pc, #224]	@ (80007b8 <MX_TIM1_Init+0x12c>)
 80006d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b34      	ldr	r3, [pc, #208]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006de:	4b33      	ldr	r3, [pc, #204]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ea:	4b30      	ldr	r3, [pc, #192]	@ (80007ac <MX_TIM1_Init+0x120>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fe01 	bl	80022f4 <HAL_TIM_PWM_Init>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f8c9 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2140      	movs	r1, #64	@ 0x40
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000708:	187a      	adds	r2, r7, r1
 800070a:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <MX_TIM1_Init+0x120>)
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fae8 	bl	8002ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 f8b8 	bl	800088c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071c:	2124      	movs	r1, #36	@ 0x24
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2260      	movs	r2, #96	@ 0x60
 8000722:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a25      	ldr	r2, [pc, #148]	@ (80007bc <MX_TIM1_Init+0x130>)
 8000728:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000748:	1879      	adds	r1, r7, r1
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_TIM1_Init+0x120>)
 800074c:	2208      	movs	r2, #8
 800074e:	0018      	movs	r0, r3
 8000750:	f001 ff54 	bl	80025fc <HAL_TIM_PWM_ConfigChannel>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000758:	f000 f898 	bl	800088c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000788:	1d3a      	adds	r2, r7, #4
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_TIM1_Init+0x120>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f002 fb06 	bl	8002da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000798:	f000 f878 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <MX_TIM1_Init+0x120>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f90c 	bl	80009bc <HAL_TIM_MspPostInit>

}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b012      	add	sp, #72	@ 0x48
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	40012c00 	.word	0x40012c00
 80007b4:	0000bb80 	.word	0x0000bb80
 80007b8:	00003a98 	.word	0x00003a98
 80007bc:	00001388 	.word	0x00001388

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	240c      	movs	r4, #12
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f002 fb43 	bl	8002e5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_GPIO_Init+0xc4>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <MX_GPIO_Init+0xc4>)
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	03c9      	lsls	r1, r1, #15
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <MX_GPIO_Init+0xc4>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	03db      	lsls	r3, r3, #15
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <MX_GPIO_Init+0xc4>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xc4>)
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	02c9      	lsls	r1, r1, #11
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_GPIO_Init+0xc4>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	02db      	lsls	r3, r3, #11
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xc4>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xc4>)
 8000814:	2180      	movs	r1, #128	@ 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_GPIO_Init+0xc4>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_GPIO_Init+0xc8>)
 800082c:	2200      	movs	r2, #0
 800082e:	21c0      	movs	r1, #192	@ 0xc0
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fc14 	bl	800105e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REED_SWITCH_Pin */
  GPIO_InitStruct.Pin = REED_SWITCH_Pin;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2220      	movs	r2, #32
 800083a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REED_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <MX_GPIO_Init+0xc8>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f000 fa78 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000854:	0021      	movs	r1, r4
 8000856:	187b      	adds	r3, r7, r1
 8000858:	22c0      	movs	r2, #192	@ 0xc0
 800085a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	187b      	adds	r3, r7, r1
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <MX_GPIO_Init+0xc8>)
 8000872:	0019      	movs	r1, r3
 8000874:	0010      	movs	r0, r2
 8000876:	f000 fa65 	bl	8000d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b009      	add	sp, #36	@ 0x24
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_MspInit+0x44>)
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_MspInit+0x44>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	619a      	str	r2, [r3, #24]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x44>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_MspInit+0x44>)
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_MspInit+0x44>)
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	0549      	lsls	r1, r1, #21
 80008c0:	430a      	orrs	r2, r1
 80008c2:	61da      	str	r2, [r3, #28]
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_MspInit+0x44>)
 80008c6:	69da      	ldr	r2, [r3, #28]
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	055b      	lsls	r3, r3, #21
 80008cc:	4013      	ands	r3, r2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	@ 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	2414      	movs	r4, #20
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	2314      	movs	r3, #20
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f002 fab2 	bl	8002e5c <memset>
  if(hi2c->Instance==I2C2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_I2C_MspInit+0x90>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d132      	bne.n	8000968 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	02c9      	lsls	r1, r1, #11
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	02db      	lsls	r3, r3, #11
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	22c0      	movs	r2, #192	@ 0xc0
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2212      	movs	r2, #18
 800092c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2203      	movs	r2, #3
 8000938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2201      	movs	r2, #1
 800093e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	187b      	adds	r3, r7, r1
 8000942:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_I2C_MspInit+0x98>)
 8000944:	0019      	movs	r1, r3
 8000946:	0010      	movs	r0, r2
 8000948:	f000 f9fc 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	03c9      	lsls	r1, r1, #15
 8000956:	430a      	orrs	r2, r1
 8000958:	61da      	str	r2, [r3, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_I2C_MspInit+0x94>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	03db      	lsls	r3, r3, #15
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b00b      	add	sp, #44	@ 0x2c
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40005800 	.word	0x40005800
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_TIM_PWM_MspInit+0x38>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10d      	bne.n	80009aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000990:	699a      	ldr	r2, [r3, #24]
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	0109      	lsls	r1, r1, #4
 8000998:	430a      	orrs	r2, r1
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	@ 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	240c      	movs	r4, #12
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 fa44 	bl	8002e5c <memset>
  if(htim->Instance==TIM1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <HAL_TIM_MspPostInit+0x78>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d125      	bne.n	8000a2a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <HAL_TIM_MspPostInit+0x7c>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_TIM_MspPostInit+0x7c>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_TIM_MspPostInit+0x7c>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	00d2      	lsls	r2, r2, #3
 8000a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2202      	movs	r2, #2
 8000a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2202      	movs	r2, #2
 8000a1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	187a      	adds	r2, r7, r1
 8000a1e:	2390      	movs	r3, #144	@ 0x90
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 f98d 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b009      	add	sp, #36	@ 0x24
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f87a 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7c:	f7ff fff7 	bl	8000a6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa6:	f002 f9e1 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fd4d 	bl	8000548 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   r0, =_estack
 8000ab0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000abc:	08002f24 	.word	0x08002f24
  ldr r2, =_sbss
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac4:	200000c8 	.word	0x200000c8

08000ac8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_COMP_IRQHandler>
	...

08000acc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <HAL_Init+0x24>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_Init+0x24>)
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f809 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae2:	f7ff fed9 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_InitTick+0x5c>)
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_InitTick+0x60>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	0019      	movs	r1, r3
 8000b06:	23fa      	movs	r3, #250	@ 0xfa
 8000b08:	0098      	lsls	r0, r3, #2
 8000b0a:	f7ff fafd 	bl	8000108 <__udivsi3>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	0019      	movs	r1, r3
 8000b12:	0020      	movs	r0, r4
 8000b14:	f7ff faf8 	bl	8000108 <__udivsi3>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f905 	bl	8000d2a <HAL_SYSTICK_Config>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e00f      	b.n	8000b48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d80b      	bhi.n	8000b46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f8e2 	bl	8000d00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_InitTick+0x64>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	001a      	movs	r2, r3
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	18d2      	adds	r2, r2, r3
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200000c4 	.word	0x200000c4

08000b80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b02      	ldr	r3, [pc, #8]	@ (8000b90 <HAL_GetTick+0x10>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	200000c4 	.word	0x200000c4

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff fff0 	bl	8000b80 <HAL_GetTick>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3301      	adds	r3, #1
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	189b      	adds	r3, r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	f7ff ffe0 	bl	8000b80 <HAL_GetTick>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf0:	d828      	bhi.n	8000c44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	33c0      	adds	r3, #192	@ 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	589b      	ldr	r3, [r3, r2]
 8000c02:	1dfa      	adds	r2, r7, #7
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2203      	movs	r2, #3
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	21ff      	movs	r1, #255	@ 0xff
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	22ff      	movs	r2, #255	@ 0xff
 8000c20:	401a      	ands	r2, r3
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	2303      	movs	r3, #3
 8000c2a:	4003      	ands	r3, r0
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	33c0      	adds	r3, #192	@ 0xc0
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c42:	e031      	b.n	8000ca8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	400b      	ands	r3, r1
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3306      	adds	r3, #6
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1dfa      	adds	r2, r7, #7
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	0011      	movs	r1, r2
 8000c64:	2203      	movs	r2, #3
 8000c66:	400a      	ands	r2, r1
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	21ff      	movs	r1, #255	@ 0xff
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	2303      	movs	r3, #3
 8000c86:	4003      	ands	r3, r0
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001c      	movs	r4, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	4023      	ands	r3, r4
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	3306      	adds	r3, #6
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	18c3      	adds	r3, r0, r3
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	045b      	lsls	r3, r3, #17
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d301      	bcc.n	8000cd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e010      	b.n	8000cf2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <SysTick_Config+0x44>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd8:	2301      	movs	r3, #1
 8000cda:	425b      	negs	r3, r3
 8000cdc:	2103      	movs	r1, #3
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff ff7c 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <SysTick_Config+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <SysTick_Config+0x44>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	1c02      	adds	r2, r0, #0
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffbf 	bl	8000cb8 <SysTick_Config>
 8000d3a:	0003      	movs	r3, r0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e14f      	b.n	8000ff4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x28>
 8000d6a:	e140      	b.n	8000fee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	58d3      	ldr	r3, [r2, r3]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2207      	movs	r2, #7
 8000e40:	4013      	ands	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2107      	movs	r1, #7
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	6939      	ldr	r1, [r7, #16]
 8000e74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	401a      	ands	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	23c0      	movs	r3, #192	@ 0xc0
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x174>
 8000eb6:	e09a      	b.n	8000fee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b54      	ldr	r3, [pc, #336]	@ (800100c <HAL_GPIO_Init+0x2c8>)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	4b53      	ldr	r3, [pc, #332]	@ (800100c <HAL_GPIO_Init+0x2c8>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	4b51      	ldr	r3, [pc, #324]	@ (800100c <HAL_GPIO_Init+0x2c8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8001010 <HAL_GPIO_Init+0x2cc>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	2390      	movs	r3, #144	@ 0x90
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1e2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a44      	ldr	r2, [pc, #272]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1de>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a43      	ldr	r2, [pc, #268]	@ (8001018 <HAL_GPIO_Init+0x2d4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1da>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a42      	ldr	r2, [pc, #264]	@ (800101c <HAL_GPIO_Init+0x2d8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1d6>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f26:	2300      	movs	r3, #0
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	@ (8001010 <HAL_GPIO_Init+0x2cc>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	035b      	lsls	r3, r3, #13
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	029b      	lsls	r3, r3, #10
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	025b      	lsls	r3, r3, #9
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_GPIO_Init+0x2dc>)
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e13      	subs	r3, r2, #0
 8000ffe:	d000      	beq.n	8001002 <HAL_GPIO_Init+0x2be>
 8001000:	e6a8      	b.n	8000d54 <HAL_GPIO_Init+0x10>
  } 
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b006      	add	sp, #24
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	48000400 	.word	0x48000400
 8001018:	48000800 	.word	0x48000800
 800101c:	48000c00 	.word	0x48000c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	000a      	movs	r2, r1
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	1cba      	adds	r2, r7, #2
 8001038:	8812      	ldrh	r2, [r2, #0]
 800103a:	4013      	ands	r3, r2
 800103c:	d004      	beq.n	8001048 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800103e:	230f      	movs	r3, #15
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e003      	b.n	8001050 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	781b      	ldrb	r3, [r3, #0]
  }
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	b004      	add	sp, #16
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	0008      	movs	r0, r1
 8001068:	0011      	movs	r1, r2
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	1c02      	adds	r2, r0, #0
 800106e:	801a      	strh	r2, [r3, #0]
 8001070:	1c7b      	adds	r3, r7, #1
 8001072:	1c0a      	adds	r2, r1, #0
 8001074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001086:	e003      	b.n	8001090 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001088:	1cbb      	adds	r3, r7, #2
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e08f      	b.n	80011ca <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2241      	movs	r2, #65	@ 0x41
 80010ae:	5c9b      	ldrb	r3, [r3, r2]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2240      	movs	r2, #64	@ 0x40
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff fc0d 	bl	80008e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2241      	movs	r2, #65	@ 0x41
 80010ca:	2124      	movs	r1, #36	@ 0x24
 80010cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	438a      	bics	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	493b      	ldr	r1, [pc, #236]	@ (80011d4 <HAL_I2C_Init+0x13c>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4938      	ldr	r1, [pc, #224]	@ (80011d8 <HAL_I2C_Init+0x140>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	0209      	lsls	r1, r1, #8
 8001110:	430a      	orrs	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e007      	b.n	8001126 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2184      	movs	r1, #132	@ 0x84
 8001120:	0209      	lsls	r1, r1, #8
 8001122:	430a      	orrs	r2, r1
 8001124:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d109      	bne.n	8001142 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	0109      	lsls	r1, r1, #4
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	e007      	b.n	8001152 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4923      	ldr	r1, [pc, #140]	@ (80011dc <HAL_I2C_Init+0x144>)
 800114e:	400a      	ands	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4920      	ldr	r1, [pc, #128]	@ (80011e0 <HAL_I2C_Init+0x148>)
 800115e:	430a      	orrs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	491a      	ldr	r1, [pc, #104]	@ (80011d8 <HAL_I2C_Init+0x140>)
 800116e:	400a      	ands	r2, r1
 8001170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	431a      	orrs	r2, r3
 800117c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69d9      	ldr	r1, [r3, #28]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2241      	movs	r2, #65	@ 0x41
 80011b6:	2120      	movs	r1, #32
 80011b8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2242      	movs	r2, #66	@ 0x42
 80011c4:	2100      	movs	r1, #0
 80011c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	f0ffffff 	.word	0xf0ffffff
 80011d8:	ffff7fff 	.word	0xffff7fff
 80011dc:	fffff7ff 	.word	0xfffff7ff
 80011e0:	02008000 	.word	0x02008000

080011e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	0008      	movs	r0, r1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	0019      	movs	r1, r3
 80011f2:	230a      	movs	r3, #10
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	1c02      	adds	r2, r0, #0
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	2308      	movs	r3, #8
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	1c0a      	adds	r2, r1, #0
 8001200:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2241      	movs	r2, #65	@ 0x41
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b20      	cmp	r3, #32
 800120c:	d000      	beq.n	8001210 <HAL_I2C_Master_Transmit+0x2c>
 800120e:	e10a      	b.n	8001426 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2240      	movs	r2, #64	@ 0x40
 8001214:	5c9b      	ldrb	r3, [r3, r2]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_I2C_Master_Transmit+0x3a>
 800121a:	2302      	movs	r3, #2
 800121c:	e104      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2240      	movs	r2, #64	@ 0x40
 8001222:	2101      	movs	r1, #1
 8001224:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001226:	f7ff fcab 	bl	8000b80 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	0219      	lsls	r1, r3, #8
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2319      	movs	r3, #25
 800123a:	2201      	movs	r2, #1
 800123c:	f000 f91e 	bl	800147c <I2C_WaitOnFlagUntilTimeout>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0ef      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2241      	movs	r2, #65	@ 0x41
 800124c:	2121      	movs	r1, #33	@ 0x21
 800124e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2242      	movs	r2, #66	@ 0x42
 8001254:	2110      	movs	r1, #16
 8001256:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2208      	movs	r2, #8
 8001268:	18ba      	adds	r2, r7, r2
 800126a:	8812      	ldrh	r2, [r2, #0]
 800126c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001278:	b29b      	uxth	r3, r3
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d906      	bls.n	800128c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	22ff      	movs	r2, #255	@ 0xff
 8001282:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001284:	2380      	movs	r3, #128	@ 0x80
 8001286:	045b      	lsls	r3, r3, #17
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e007      	b.n	800129c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001290:	b29a      	uxth	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001296:	2380      	movs	r3, #128	@ 0x80
 8001298:	049b      	lsls	r3, r3, #18
 800129a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d027      	beq.n	80012f4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	697c      	ldr	r4, [r7, #20]
 80012e0:	230a      	movs	r3, #10
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	8819      	ldrh	r1, [r3, #0]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_I2C_Master_Transmit+0x24c>)
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	0023      	movs	r3, r4
 80012ee:	f000 fa9f 	bl	8001830 <I2C_TransferConfig>
 80012f2:	e06f      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	697c      	ldr	r4, [r7, #20]
 80012fc:	230a      	movs	r3, #10
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <HAL_I2C_Master_Transmit+0x24c>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	0023      	movs	r3, r4
 800130a:	f000 fa91 	bl	8001830 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800130e:	e061      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	0018      	movs	r0, r3
 8001318:	f000 f908 	bl	800152c <I2C_WaitOnTXISFlagUntilTimeout>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e081      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	3b01      	subs	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134c:	3b01      	subs	r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001358:	b29b      	uxth	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03a      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0x1f0>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001362:	2b00      	cmp	r3, #0
 8001364:	d136      	bne.n	80013d4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	0013      	movs	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	2180      	movs	r1, #128	@ 0x80
 8001374:	f000 f882 	bl	800147c <I2C_WaitOnFlagUntilTimeout>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e053      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001384:	b29b      	uxth	r3, r3
 8001386:	2bff      	cmp	r3, #255	@ 0xff
 8001388:	d911      	bls.n	80013ae <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	22ff      	movs	r2, #255	@ 0xff
 800138e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001394:	b2da      	uxtb	r2, r3
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	045c      	lsls	r4, r3, #17
 800139a:	230a      	movs	r3, #10
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	8819      	ldrh	r1, [r3, #0]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	0023      	movs	r3, r4
 80013a8:	f000 fa42 	bl	8001830 <I2C_TransferConfig>
 80013ac:	e012      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	049c      	lsls	r4, r3, #18
 80013c2:	230a      	movs	r3, #10
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	8819      	ldrh	r1, [r3, #0]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	0023      	movs	r3, r4
 80013d0:	f000 fa2e 	bl	8001830 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d198      	bne.n	8001310 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 f8e7 	bl	80015b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e01a      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2220      	movs	r2, #32
 80013f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	490b      	ldr	r1, [pc, #44]	@ (8001434 <HAL_I2C_Master_Transmit+0x250>)
 8001406:	400a      	ands	r2, r1
 8001408:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2241      	movs	r2, #65	@ 0x41
 800140e:	2120      	movs	r1, #32
 8001410:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2242      	movs	r2, #66	@ 0x42
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2240      	movs	r2, #64	@ 0x40
 800141e:	2100      	movs	r1, #0
 8001420:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
  }
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b007      	add	sp, #28
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	80002000 	.word	0x80002000
 8001434:	fe00e800 	.word	0xfe00e800

08001438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	2b02      	cmp	r3, #2
 800144c:	d103      	bne.n	8001456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d007      	beq.n	8001474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	619a      	str	r2, [r3, #24]
  }
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800148c:	e03a      	b.n	8001504 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f8d3 	bl	8001640 <I2C_IsErrorOccurred>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e040      	b.n	8001524 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	d02d      	beq.n	8001504 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a8:	f7ff fb6a 	bl	8000b80 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d302      	bcc.n	80014be <I2C_WaitOnFlagUntilTimeout+0x42>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d122      	bne.n	8001504 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	4013      	ands	r3, r2
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	425a      	negs	r2, r3
 80014ce:	4153      	adcs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	001a      	movs	r2, r3
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d113      	bne.n	8001504 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e0:	2220      	movs	r2, #32
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2241      	movs	r2, #65	@ 0x41
 80014ec:	2120      	movs	r1, #32
 80014ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2242      	movs	r2, #66	@ 0x42
 80014f4:	2100      	movs	r1, #0
 80014f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	@ 0x40
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e00f      	b.n	8001524 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4013      	ands	r3, r2
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	425a      	negs	r2, r3
 8001514:	4153      	adcs	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	001a      	movs	r2, r3
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d0b5      	beq.n	800148e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b004      	add	sp, #16
 800152a:	bd80      	pop	{r7, pc}

0800152c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001538:	e032      	b.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f87d 	bl	8001640 <I2C_IsErrorOccurred>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e030      	b.n	80015b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	d025      	beq.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001554:	f7ff fb14 	bl	8000b80 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d302      	bcc.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11a      	bne.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d013      	beq.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	2220      	movs	r2, #32
 800157e:	431a      	orrs	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2241      	movs	r2, #65	@ 0x41
 8001588:	2120      	movs	r1, #32
 800158a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2242      	movs	r2, #66	@ 0x42
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e007      	b.n	80015b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d1c5      	bne.n	800153a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c4:	e02f      	b.n	8001626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f837 	bl	8001640 <I2C_IsErrorOccurred>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02d      	b.n	8001636 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015da:	f7ff fad1 	bl	8000b80 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d302      	bcc.n	80015f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11a      	bne.n	8001626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2220      	movs	r2, #32
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d013      	beq.n	8001626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	2220      	movs	r2, #32
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2241      	movs	r2, #65	@ 0x41
 800160e:	2120      	movs	r1, #32
 8001610:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2242      	movs	r2, #66	@ 0x42
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2240      	movs	r2, #64	@ 0x40
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e007      	b.n	8001636 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2220      	movs	r2, #32
 800162e:	4013      	ands	r3, r2
 8001630:	2b20      	cmp	r3, #32
 8001632:	d1c8      	bne.n	80015c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164c:	2327      	movs	r3, #39	@ 0x27
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2210      	movs	r2, #16
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <I2C_IsErrorOccurred+0x2e>
 800166c:	e079      	b.n	8001762 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2210      	movs	r2, #16
 8001674:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001676:	e057      	b.n	8001728 <I2C_IsErrorOccurred+0xe8>
 8001678:	2227      	movs	r2, #39	@ 0x27
 800167a:	18bb      	adds	r3, r7, r2
 800167c:	18ba      	adds	r2, r7, r2
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	d04f      	beq.n	8001728 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001688:	f7ff fa7a 	bl	8000b80 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d302      	bcc.n	800169e <I2C_IsErrorOccurred+0x5e>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d144      	bne.n	8001728 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	01db      	lsls	r3, r3, #7
 80016a8:	4013      	ands	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80016ac:	2013      	movs	r0, #19
 80016ae:	183b      	adds	r3, r7, r0
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	2142      	movs	r1, #66	@ 0x42
 80016b4:	5c52      	ldrb	r2, [r2, r1]
 80016b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	401a      	ands	r2, r3
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d126      	bne.n	800171a <I2C_IsErrorOccurred+0xda>
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	01db      	lsls	r3, r3, #7
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d021      	beq.n	800171a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d01d      	beq.n	800171a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	01c9      	lsls	r1, r1, #7
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016f0:	f7ff fa46 	bl	8000b80 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f8:	e00f      	b.n	800171a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016fa:	f7ff fa41 	bl	8000b80 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b19      	cmp	r3, #25
 8001706:	d908      	bls.n	800171a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	2220      	movs	r2, #32
 800170c:	4313      	orrs	r3, r2
 800170e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001710:	2327      	movs	r3, #39	@ 0x27
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]

              break;
 8001718:	e006      	b.n	8001728 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2220      	movs	r2, #32
 8001722:	4013      	ands	r3, r2
 8001724:	2b20      	cmp	r3, #32
 8001726:	d1e8      	bne.n	80016fa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2220      	movs	r2, #32
 8001730:	4013      	ands	r3, r2
 8001732:	2b20      	cmp	r3, #32
 8001734:	d004      	beq.n	8001740 <I2C_IsErrorOccurred+0x100>
 8001736:	2327      	movs	r3, #39	@ 0x27
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d09b      	beq.n	8001678 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001740:	2327      	movs	r3, #39	@ 0x27
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2220      	movs	r2, #32
 8001750:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2204      	movs	r2, #4
 8001756:	4313      	orrs	r3, r2
 8001758:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800175a:	2327      	movs	r3, #39	@ 0x27
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4013      	ands	r3, r2
 8001772:	d00c      	beq.n	800178e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2201      	movs	r2, #1
 8001778:	4313      	orrs	r3, r2
 800177a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	0052      	lsls	r2, r2, #1
 8001784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001786:	2327      	movs	r3, #39	@ 0x27
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4013      	ands	r3, r2
 8001796:	d00c      	beq.n	80017b2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2208      	movs	r2, #8
 800179c:	4313      	orrs	r3, r2
 800179e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017aa:	2327      	movs	r3, #39	@ 0x27
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d00c      	beq.n	80017d6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2202      	movs	r2, #2
 80017c0:	4313      	orrs	r3, r2
 80017c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2280      	movs	r2, #128	@ 0x80
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017ce:	2327      	movs	r3, #39	@ 0x27
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017d6:	2327      	movs	r3, #39	@ 0x27
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01d      	beq.n	800181c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff fe28 	bl	8001438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	490e      	ldr	r1, [pc, #56]	@ (800182c <I2C_IsErrorOccurred+0x1ec>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2241      	movs	r2, #65	@ 0x41
 8001808:	2120      	movs	r1, #32
 800180a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2242      	movs	r2, #66	@ 0x42
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2240      	movs	r2, #64	@ 0x40
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800181c:	2327      	movs	r3, #39	@ 0x27
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b00a      	add	sp, #40	@ 0x28
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	fe00e800 	.word	0xfe00e800

08001830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	0008      	movs	r0, r1
 800183a:	0011      	movs	r1, r2
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	240a      	movs	r4, #10
 8001840:	193b      	adds	r3, r7, r4
 8001842:	1c02      	adds	r2, r0, #0
 8001844:	801a      	strh	r2, [r3, #0]
 8001846:	2009      	movs	r0, #9
 8001848:	183b      	adds	r3, r7, r0
 800184a:	1c0a      	adds	r2, r1, #0
 800184c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800184e:	193b      	adds	r3, r7, r4
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	059b      	lsls	r3, r3, #22
 8001854:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001856:	183b      	adds	r3, r7, r0
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0419      	lsls	r1, r3, #16
 800185c:	23ff      	movs	r3, #255	@ 0xff
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001862:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	4313      	orrs	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800187a:	0d51      	lsrs	r1, r2, #21
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	00d2      	lsls	r2, r2, #3
 8001880:	400a      	ands	r2, r1
 8001882:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <I2C_TransferConfig+0x70>)
 8001884:	430a      	orrs	r2, r1
 8001886:	43d2      	mvns	r2, r2
 8001888:	401a      	ands	r2, r3
 800188a:	0011      	movs	r1, r2
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b007      	add	sp, #28
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	03ff63ff 	.word	0x03ff63ff

080018a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	@ 0x41
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d138      	bne.n	800192c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2240      	movs	r2, #64	@ 0x40
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e032      	b.n	800192e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2240      	movs	r2, #64	@ 0x40
 80018cc:	2101      	movs	r1, #1
 80018ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2241      	movs	r2, #65	@ 0x41
 80018d4:	2124      	movs	r1, #36	@ 0x24
 80018d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4911      	ldr	r1, [pc, #68]	@ (8001938 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2101      	movs	r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2241      	movs	r2, #65	@ 0x41
 800191c:	2120      	movs	r1, #32
 800191e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2240      	movs	r2, #64	@ 0x40
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
  }
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	ffffefff 	.word	0xffffefff

0800193c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2241      	movs	r2, #65	@ 0x41
 800194a:	5c9b      	ldrb	r3, [r3, r2]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	d139      	bne.n	80019c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2240      	movs	r2, #64	@ 0x40
 8001956:	5c9b      	ldrb	r3, [r3, r2]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800195c:	2302      	movs	r3, #2
 800195e:	e033      	b.n	80019c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2240      	movs	r2, #64	@ 0x40
 8001964:	2101      	movs	r1, #1
 8001966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2241      	movs	r2, #65	@ 0x41
 800196c:	2124      	movs	r1, #36	@ 0x24
 800196e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2241      	movs	r2, #65	@ 0x41
 80019b6:	2120      	movs	r1, #32
 80019b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2240      	movs	r2, #64	@ 0x40
 80019be:	2100      	movs	r1, #0
 80019c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
  }
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b004      	add	sp, #16
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	fffff0ff 	.word	0xfffff0ff

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e301      	b.n	8001fea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x1e>
 80019f0:	e08d      	b.n	8001b0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019f2:	4bc3      	ldr	r3, [pc, #780]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	220c      	movs	r2, #12
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d00e      	beq.n	8001a1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fe:	4bc0      	ldr	r3, [pc, #768]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	220c      	movs	r2, #12
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x64>
 8001a0a:	4bbd      	ldr	r3, [pc, #756]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	401a      	ands	r2, r3
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4bb8      	ldr	r3, [pc, #736]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	029b      	lsls	r3, r3, #10
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x56>
 8001a28:	e070      	b.n	8001b0c <HAL_RCC_OscConfig+0x138>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d000      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
 8001a32:	e06b      	b.n	8001b0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e2d8      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x7c>
 8001a40:	4baf      	ldr	r3, [pc, #700]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4bae      	ldr	r3, [pc, #696]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e02f      	b.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x9e>
 8001a58:	4ba9      	ldr	r3, [pc, #676]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4ba8      	ldr	r3, [pc, #672]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	49a9      	ldr	r1, [pc, #676]	@ (8001d04 <HAL_RCC_OscConfig+0x330>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	4ba6      	ldr	r3, [pc, #664]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4ba5      	ldr	r3, [pc, #660]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	49a7      	ldr	r1, [pc, #668]	@ (8001d08 <HAL_RCC_OscConfig+0x334>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e01e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc4>
 8001a7a:	4ba1      	ldr	r3, [pc, #644]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4ba0      	ldr	r3, [pc, #640]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	02c9      	lsls	r1, r1, #11
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b9d      	ldr	r3, [pc, #628]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	2180      	movs	r1, #128	@ 0x80
 8001a90:	0249      	lsls	r1, r1, #9
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001a98:	4b99      	ldr	r3, [pc, #612]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b98      	ldr	r3, [pc, #608]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	4999      	ldr	r1, [pc, #612]	@ (8001d04 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4b96      	ldr	r3, [pc, #600]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b95      	ldr	r3, [pc, #596]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	4997      	ldr	r1, [pc, #604]	@ (8001d08 <HAL_RCC_OscConfig+0x334>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d014      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f862 	bl	8000b80 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f85d 	bl	8000b80 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	@ 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e28a      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xee>
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f84d 	bl	8000b80 <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff f848 	bl	8000b80 <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	@ 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e275      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b80      	ldr	r3, [pc, #512]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	4013      	ands	r3, r2
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x118>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x146>
 8001b18:	e069      	b.n	8001bee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b1a:	4b79      	ldr	r3, [pc, #484]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	d00b      	beq.n	8001b3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b24:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d11c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x196>
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d116      	bne.n	8001b6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3c:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e24b      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b6b      	ldr	r3, [pc, #428]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	22f8      	movs	r2, #248	@ 0xf8
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	00da      	lsls	r2, r3, #3
 8001b62:	4b67      	ldr	r3, [pc, #412]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b68:	e041      	b.n	8001bee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d024      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b72:	4b63      	ldr	r3, [pc, #396]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b62      	ldr	r3, [pc, #392]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ffff 	bl	8000b80 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe fffa 	bl	8000b80 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e227      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b59      	ldr	r3, [pc, #356]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f1      	beq.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b56      	ldr	r3, [pc, #344]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	22f8      	movs	r2, #248	@ 0xf8
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00da      	lsls	r2, r3, #3
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe ffda 	bl	8000b80 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7fe ffd5 	bl	8000b80 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e202      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be4:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d1f1      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d036      	beq.n	8001c66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d019      	beq.n	8001c34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c00:	4b3f      	ldr	r3, [pc, #252]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c04:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7fe ffb8 	bl	8000b80 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c16:	f7fe ffb3 	bl	8000b80 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1e0      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d0f1      	beq.n	8001c16 <HAL_RCC_OscConfig+0x242>
 8001c32:	e018      	b.n	8001c66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7fe ff9e 	bl	8000b80 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7fe ff99 	bl	8000b80 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1c6      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f1      	bne.n	8001c4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <HAL_RCC_OscConfig+0x29e>
 8001c70:	e0b4      	b.n	8001ddc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	201f      	movs	r0, #31
 8001c74:	183b      	adds	r3, r7, r0
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	055b      	lsls	r3, r3, #21
 8001c82:	4013      	ands	r3, r2
 8001c84:	d110      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	0549      	lsls	r1, r1, #21
 8001c90:	430a      	orrs	r2, r1
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d11a      	bne.n	8001cea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	0049      	lsls	r1, r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe ff5d 	bl	8000b80 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ccc:	f7fe ff58 	bl	8000b80 <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e185      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10e      	bne.n	8001d10 <HAL_RCC_OscConfig+0x33c>
 8001cf2:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4b02      	ldr	r3, [pc, #8]	@ (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	e035      	b.n	8001d6c <HAL_RCC_OscConfig+0x398>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	fffeffff 	.word	0xfffeffff
 8001d08:	fffbffff 	.word	0xfffbffff
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x35e>
 8001d18:	4bb6      	ldr	r3, [pc, #728]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4bb5      	ldr	r3, [pc, #724]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	621a      	str	r2, [r3, #32]
 8001d24:	4bb3      	ldr	r3, [pc, #716]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d26:	6a1a      	ldr	r2, [r3, #32]
 8001d28:	4bb2      	ldr	r3, [pc, #712]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	621a      	str	r2, [r3, #32]
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x398>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x380>
 8001d3a:	4bae      	ldr	r3, [pc, #696]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d3c:	6a1a      	ldr	r2, [r3, #32]
 8001d3e:	4bad      	ldr	r3, [pc, #692]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d40:	2104      	movs	r1, #4
 8001d42:	430a      	orrs	r2, r1
 8001d44:	621a      	str	r2, [r3, #32]
 8001d46:	4bab      	ldr	r3, [pc, #684]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	4baa      	ldr	r3, [pc, #680]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	621a      	str	r2, [r3, #32]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0x398>
 8001d54:	4ba7      	ldr	r3, [pc, #668]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4ba6      	ldr	r3, [pc, #664]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	621a      	str	r2, [r3, #32]
 8001d60:	4ba4      	ldr	r3, [pc, #656]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	4ba3      	ldr	r3, [pc, #652]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	438a      	bics	r2, r1
 8001d6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d014      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7fe ff04 	bl	8000b80 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe feff 	bl	8000b80 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	4a9b      	ldr	r2, [pc, #620]	@ (8001ff8 <HAL_RCC_OscConfig+0x624>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e12b      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	4b98      	ldr	r3, [pc, #608]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
 8001d9c:	e013      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe feef 	bl	8000b80 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7fe feea 	bl	8000b80 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a91      	ldr	r2, [pc, #580]	@ (8001ff8 <HAL_RCC_OscConfig+0x624>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e116      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc6:	231f      	movs	r3, #31
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	4b87      	ldr	r3, [pc, #540]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	4989      	ldr	r1, [pc, #548]	@ (8001ffc <HAL_RCC_OscConfig+0x628>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	4013      	ands	r3, r2
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d12a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dee:	4b81      	ldr	r3, [pc, #516]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001df2:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001df4:	2104      	movs	r1, #4
 8001df6:	430a      	orrs	r2, r1
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe febb 	bl	8000b80 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e10:	f7fe feb6 	bl	8000b80 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0e3      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e22:	4b74      	ldr	r3, [pc, #464]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e2c:	4b71      	ldr	r3, [pc, #452]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e30:	22f8      	movs	r2, #248	@ 0xf8
 8001e32:	4393      	bics	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	00da      	lsls	r2, r3, #3
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e42:	e034      	b.n	8001eae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	3305      	adds	r3, #5
 8001e4a:	d111      	bne.n	8001e70 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e4c:	4b69      	ldr	r3, [pc, #420]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e50:	4b68      	ldr	r3, [pc, #416]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e52:	2104      	movs	r1, #4
 8001e54:	438a      	bics	r2, r1
 8001e56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e58:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	22f8      	movs	r2, #248	@ 0xf8
 8001e5e:	4393      	bics	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	00da      	lsls	r2, r3, #3
 8001e68:	4b62      	ldr	r3, [pc, #392]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e6e:	e01e      	b.n	8001eae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e70:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e74:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e76:	2104      	movs	r1, #4
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	438a      	bics	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7fe fe7a 	bl	8000b80 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e92:	f7fe fe75 	bl	8000b80 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0a2      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d1f1      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d100      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4e4>
 8001eb6:	e097      	b.n	8001fe8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4f2>
 8001ec4:	e06b      	b.n	8001f9e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d14c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b48      	ldr	r3, [pc, #288]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001ed4:	494a      	ldr	r1, [pc, #296]	@ (8002000 <HAL_RCC_OscConfig+0x62c>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fe51 	bl	8000b80 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe fe4c 	bl	8000b80 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e079      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	049b      	lsls	r3, r3, #18
 8001efe:	4013      	ands	r3, r2
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	220f      	movs	r2, #15
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f10:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <HAL_RCC_OscConfig+0x630>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0449      	lsls	r1, r1, #17
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fe1f 	bl	8000b80 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fe1a 	bl	8000b80 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e047      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	049b      	lsls	r3, r3, #18
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x574>
 8001f66:	e03f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f6e:	4924      	ldr	r1, [pc, #144]	@ (8002000 <HAL_RCC_OscConfig+0x62c>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe04 	bl	8000b80 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fdff 	bl	8000b80 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e02c      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	049b      	lsls	r3, r3, #18
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5aa>
 8001f9c:	e024      	b.n	8001fe8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e01f      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	220f      	movs	r2, #15
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	23f0      	movs	r3, #240	@ 0xf0
 8001fd8:	039b      	lsls	r3, r3, #14
 8001fda:	401a      	ands	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b008      	add	sp, #32
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	efffffff 	.word	0xefffffff
 8002000:	feffffff 	.word	0xfeffffff
 8002004:	ffc2ffff 	.word	0xffc2ffff

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b3      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d911      	bls.n	800204e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b58      	ldr	r3, [pc, #352]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	4b55      	ldr	r3, [pc, #340]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203c:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e09a      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d015      	beq.n	8002084 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d006      	beq.n	8002070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002062:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002068:	21e0      	movs	r1, #224	@ 0xe0
 800206a:	00c9      	lsls	r1, r1, #3
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	22f0      	movs	r2, #240	@ 0xf0
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b44      	ldr	r3, [pc, #272]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d040      	beq.n	8002110 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	4013      	ands	r3, r2
 80020a0:	d114      	bne.n	80020cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06e      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	049b      	lsls	r3, r3, #18
 80020b6:	4013      	ands	r3, r2
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e062      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e05b      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fd4e 	bl	8000b80 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	e009      	b.n	80020fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	f7fe fd49 	bl	8000b80 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_RCC_ClockConfig+0x18c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e042      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	220c      	movs	r2, #12
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1ec      	bne.n	80020ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d211      	bcs.n	8002142 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4393      	bics	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	4b18      	ldr	r3, [pc, #96]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002130:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_RCC_ClockConfig+0x184>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e020      	b.n	8002184 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_RCC_ClockConfig+0x190>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002160:	f000 f820 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002164:	0001      	movs	r1, r0
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_RCC_ClockConfig+0x188>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	220f      	movs	r2, #15
 800216e:	4013      	ands	r3, r2
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x194>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	000a      	movs	r2, r1
 8002176:	40da      	lsrs	r2, r3
 8002178:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_RCC_ClockConfig+0x198>)
 800217a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fcb9 	bl	8000af4 <HAL_InitTick>
  
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	00001388 	.word	0x00001388
 8002198:	fffff8ff 	.word	0xfffff8ff
 800219c:	08002eec 	.word	0x08002eec
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	220c      	movs	r2, #12
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x36>
 80021d2:	e02c      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	e02c      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	220f      	movs	r2, #15
 80021e0:	4013      	ands	r3, r2
 80021e2:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021e8:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	220f      	movs	r2, #15
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a16      	ldr	r2, [pc, #88]	@ (800224c <HAL_RCC_GetSysClockFreq+0xa8>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	025b      	lsls	r3, r3, #9
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4810      	ldr	r0, [pc, #64]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002204:	f7fd ff80 	bl	8000108 <__udivsi3>
 8002208:	0003      	movs	r3, r0
 800220a:	001a      	movs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4353      	muls	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e009      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	000a      	movs	r2, r1
 8002218:	0152      	lsls	r2, r2, #5
 800221a:	1a52      	subs	r2, r2, r1
 800221c:	0193      	lsls	r3, r2, #6
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	185b      	adds	r3, r3, r1
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	e002      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002230:	613b      	str	r3, [r7, #16]
      break;
 8002232:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002234:	693b      	ldr	r3, [r7, #16]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	007a1200 	.word	0x007a1200
 8002248:	08002efc 	.word	0x08002efc
 800224c:	08002f0c 	.word	0x08002f0c

08002250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	223d      	movs	r2, #61	@ 0x3d
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d001      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e03b      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	223d      	movs	r2, #61	@ 0x3d
 800226c:	2102      	movs	r1, #2
 800226e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x5a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	429a      	cmp	r2, r3
 8002294:	d009      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x5a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a14      	ldr	r2, [pc, #80]	@ (80022ec <HAL_TIM_Base_Start_IT+0x9c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d004      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x5a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d111      	bne.n	80022ce <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2207      	movs	r2, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d010      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	e007      	b.n	80022de <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40014000 	.word	0x40014000

080022f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e042      	b.n	800238c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	@ 0x3d
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	223c      	movs	r2, #60	@ 0x3c
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f7fe fb2d 	bl	800097c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223d      	movs	r2, #61	@ 0x3d
 8002326:	2102      	movs	r1, #2
 8002328:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	0019      	movs	r1, r3
 8002334:	0010      	movs	r0, r2
 8002336:	f000 fa27 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2246      	movs	r2, #70	@ 0x46
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223e      	movs	r2, #62	@ 0x3e
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	223f      	movs	r2, #63	@ 0x3f
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2241      	movs	r2, #65	@ 0x41
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2242      	movs	r2, #66	@ 0x42
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2243      	movs	r2, #67	@ 0x43
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2244      	movs	r2, #68	@ 0x44
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2245      	movs	r2, #69	@ 0x45
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	223d      	movs	r2, #61	@ 0x3d
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <HAL_TIM_PWM_Start+0x22>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	223e      	movs	r2, #62	@ 0x3e
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	4193      	sbcs	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e01f      	b.n	80023f6 <HAL_TIM_PWM_Start+0x62>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d108      	bne.n	80023ce <HAL_TIM_PWM_Start+0x3a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223f      	movs	r2, #63	@ 0x3f
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	4193      	sbcs	r3, r2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e013      	b.n	80023f6 <HAL_TIM_PWM_Start+0x62>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d108      	bne.n	80023e6 <HAL_TIM_PWM_Start+0x52>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	5c9b      	ldrb	r3, [r3, r2]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	4193      	sbcs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e007      	b.n	80023f6 <HAL_TIM_PWM_Start+0x62>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2241      	movs	r2, #65	@ 0x41
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	4193      	sbcs	r3, r2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e074      	b.n	80024e8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0x7a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	223e      	movs	r2, #62	@ 0x3e
 8002408:	2102      	movs	r1, #2
 800240a:	5499      	strb	r1, [r3, r2]
 800240c:	e013      	b.n	8002436 <HAL_TIM_PWM_Start+0xa2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d104      	bne.n	800241e <HAL_TIM_PWM_Start+0x8a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	223f      	movs	r2, #63	@ 0x3f
 8002418:	2102      	movs	r1, #2
 800241a:	5499      	strb	r1, [r3, r2]
 800241c:	e00b      	b.n	8002436 <HAL_TIM_PWM_Start+0xa2>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d104      	bne.n	800242e <HAL_TIM_PWM_Start+0x9a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	@ 0x40
 8002428:	2102      	movs	r1, #2
 800242a:	5499      	strb	r1, [r3, r2]
 800242c:	e003      	b.n	8002436 <HAL_TIM_PWM_Start+0xa2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2241      	movs	r2, #65	@ 0x41
 8002432:	2102      	movs	r1, #2
 8002434:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	0018      	movs	r0, r3
 8002440:	f000 fc2c 	bl	8002c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <HAL_TIM_PWM_Start+0x15c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_PWM_Start+0xd8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a28      	ldr	r2, [pc, #160]	@ (80024f4 <HAL_TIM_PWM_Start+0x160>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIM_PWM_Start+0xd8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_TIM_PWM_Start+0x164>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_PWM_Start+0xd8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a25      	ldr	r2, [pc, #148]	@ (80024fc <HAL_TIM_PWM_Start+0x168>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_TIM_PWM_Start+0xdc>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_TIM_PWM_Start+0xde>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2180      	movs	r1, #128	@ 0x80
 8002482:	0209      	lsls	r1, r1, #8
 8002484:	430a      	orrs	r2, r1
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <HAL_TIM_PWM_Start+0x15c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00f      	beq.n	80024b2 <HAL_TIM_PWM_Start+0x11e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	429a      	cmp	r2, r3
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_PWM_Start+0x11e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_TIM_PWM_Start+0x16c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_PWM_Start+0x11e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <HAL_TIM_PWM_Start+0x160>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d010      	beq.n	80024e6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fbc0 	bl	8002c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2f      	ldr	r2, [pc, #188]	@ (80025e0 <HAL_TIM_PWM_Stop+0xdc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00e      	beq.n	8002544 <HAL_TIM_PWM_Stop+0x40>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2e      	ldr	r2, [pc, #184]	@ (80025e4 <HAL_TIM_PWM_Stop+0xe0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_TIM_PWM_Stop+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2c      	ldr	r2, [pc, #176]	@ (80025e8 <HAL_TIM_PWM_Stop+0xe4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_TIM_PWM_Stop+0x40>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2b      	ldr	r2, [pc, #172]	@ (80025ec <HAL_TIM_PWM_Stop+0xe8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_TIM_PWM_Stop+0x44>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_TIM_PWM_Stop+0x46>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d013      	beq.n	8002576 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_TIM_PWM_Stop+0xec>)
 8002556:	4013      	ands	r3, r2
 8002558:	d10d      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x72>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a24      	ldr	r2, [pc, #144]	@ (80025f4 <HAL_TIM_PWM_Stop+0xf0>)
 8002562:	4013      	ands	r3, r2
 8002564:	d107      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x72>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4921      	ldr	r1, [pc, #132]	@ (80025f8 <HAL_TIM_PWM_Stop+0xf4>)
 8002572:	400a      	ands	r2, r1
 8002574:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_TIM_PWM_Stop+0xec>)
 800257e:	4013      	ands	r3, r2
 8002580:	d10d      	bne.n	800259e <HAL_TIM_PWM_Stop+0x9a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_TIM_PWM_Stop+0xf0>)
 800258a:	4013      	ands	r3, r2
 800258c:	d107      	bne.n	800259e <HAL_TIM_PWM_Stop+0x9a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	438a      	bics	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Stop+0xaa>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	223e      	movs	r2, #62	@ 0x3e
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]
 80025ac:	e013      	b.n	80025d6 <HAL_TIM_PWM_Stop+0xd2>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Stop+0xba>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223f      	movs	r2, #63	@ 0x3f
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]
 80025bc:	e00b      	b.n	80025d6 <HAL_TIM_PWM_Stop+0xd2>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Stop+0xca>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	2101      	movs	r1, #1
 80025ca:	5499      	strb	r1, [r3, r2]
 80025cc:	e003      	b.n	80025d6 <HAL_TIM_PWM_Stop+0xd2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2241      	movs	r2, #65	@ 0x41
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40014000 	.word	0x40014000
 80025e8:	40014400 	.word	0x40014400
 80025ec:	40014800 	.word	0x40014800
 80025f0:	00001111 	.word	0x00001111
 80025f4:	00000444 	.word	0x00000444
 80025f8:	ffff7fff 	.word	0xffff7fff

080025fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2317      	movs	r3, #23
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	223c      	movs	r2, #60	@ 0x3c
 8002614:	5c9b      	ldrb	r3, [r3, r2]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_ConfigChannel+0x22>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ad      	b.n	800277a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	223c      	movs	r2, #60	@ 0x3c
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d100      	bne.n	800262e <HAL_TIM_PWM_ConfigChannel+0x32>
 800262c:	e076      	b.n	800271c <HAL_TIM_PWM_ConfigChannel+0x120>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d900      	bls.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002634:	e095      	b.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d04e      	beq.n	80026da <HAL_TIM_PWM_ConfigChannel+0xde>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b08      	cmp	r3, #8
 8002640:	d900      	bls.n	8002644 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002642:	e08e      	b.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x56>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d021      	beq.n	8002694 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002650:	e087      	b.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f922 	bl	80028a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2108      	movs	r1, #8
 800266c:	430a      	orrs	r2, r1
 800266e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2104      	movs	r1, #4
 800267c:	438a      	bics	r2, r1
 800267e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	619a      	str	r2, [r3, #24]
      break;
 8002692:	e06b      	b.n	800276c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f989 	bl	80029b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2180      	movs	r1, #128	@ 0x80
 80026ae:	0109      	lsls	r1, r1, #4
 80026b0:	430a      	orrs	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4931      	ldr	r1, [pc, #196]	@ (8002784 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6999      	ldr	r1, [r3, #24]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]
      break;
 80026d8:	e048      	b.n	800276c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	0011      	movs	r1, r2
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f9ea 	bl	8002abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2108      	movs	r1, #8
 80026f4:	430a      	orrs	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2104      	movs	r1, #4
 8002704:	438a      	bics	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69d9      	ldr	r1, [r3, #28]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	61da      	str	r2, [r3, #28]
      break;
 800271a:	e027      	b.n	800276c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fa4f 	bl	8002bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0109      	lsls	r1, r1, #4
 8002738:	430a      	orrs	r2, r1
 800273a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	490f      	ldr	r1, [pc, #60]	@ (8002784 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002748:	400a      	ands	r2, r1
 800274a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69d9      	ldr	r1, [r3, #28]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	021a      	lsls	r2, r3, #8
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
      break;
 8002760:	e004      	b.n	800276c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002762:	2317      	movs	r3, #23
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
      break;
 800276a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	223c      	movs	r2, #60	@ 0x3c
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

  return status;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b006      	add	sp, #24
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	fffffbff 	.word	0xfffffbff

08002788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <TIM_Base_SetConfig+0x100>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d008      	beq.n	80027b2 <TIM_Base_SetConfig+0x2a>
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	05db      	lsls	r3, r3, #23
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0x2a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a37      	ldr	r2, [pc, #220]	@ (800288c <TIM_Base_SetConfig+0x104>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2270      	movs	r2, #112	@ 0x70
 80027b6:	4393      	bics	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a30      	ldr	r2, [pc, #192]	@ (8002888 <TIM_Base_SetConfig+0x100>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d018      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	05db      	lsls	r3, r3, #23
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d013      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	@ (800288c <TIM_Base_SetConfig+0x104>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <TIM_Base_SetConfig+0x108>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002894 <TIM_Base_SetConfig+0x10c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a29      	ldr	r2, [pc, #164]	@ (8002898 <TIM_Base_SetConfig+0x110>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x76>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <TIM_Base_SetConfig+0x114>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <TIM_Base_SetConfig+0x118>)
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	4393      	bics	r3, r2
 8002816:	001a      	movs	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <TIM_Base_SetConfig+0x100>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00b      	beq.n	8002856 <TIM_Base_SetConfig+0xce>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <TIM_Base_SetConfig+0x10c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0xce>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <TIM_Base_SetConfig+0x110>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0xce>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a12      	ldr	r2, [pc, #72]	@ (800289c <TIM_Base_SetConfig+0x114>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d103      	bne.n	800285e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2201      	movs	r2, #1
 8002876:	4393      	bics	r3, r2
 8002878:	001a      	movs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  }
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b004      	add	sp, #16
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400
 8002890:	40002000 	.word	0x40002000
 8002894:	40014000 	.word	0x40014000
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800
 80028a0:	fffffcff 	.word	0xfffffcff

080028a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4393      	bics	r3, r2
 80028bc:	001a      	movs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2270      	movs	r2, #112	@ 0x70
 80028d2:	4393      	bics	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2203      	movs	r2, #3
 80028da:	4393      	bics	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4393      	bics	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a27      	ldr	r2, [pc, #156]	@ (800299c <TIM_OC1_SetConfig+0xf8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00b      	beq.n	800291a <TIM_OC1_SetConfig+0x76>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a26      	ldr	r2, [pc, #152]	@ (80029a0 <TIM_OC1_SetConfig+0xfc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <TIM_OC1_SetConfig+0x76>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <TIM_OC1_SetConfig+0x100>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <TIM_OC1_SetConfig+0x76>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <TIM_OC1_SetConfig+0x104>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10c      	bne.n	8002934 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2208      	movs	r2, #8
 800291e:	4393      	bics	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2204      	movs	r2, #4
 8002930:	4393      	bics	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a19      	ldr	r2, [pc, #100]	@ (800299c <TIM_OC1_SetConfig+0xf8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00b      	beq.n	8002954 <TIM_OC1_SetConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <TIM_OC1_SetConfig+0xfc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <TIM_OC1_SetConfig+0xb0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <TIM_OC1_SetConfig+0x100>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_OC1_SetConfig+0xb0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a16      	ldr	r2, [pc, #88]	@ (80029a8 <TIM_OC1_SetConfig+0x104>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d111      	bne.n	8002978 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <TIM_OC1_SetConfig+0x108>)
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <TIM_OC1_SetConfig+0x10c>)
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b006      	add	sp, #24
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800
 80029ac:	fffffeff 	.word	0xfffffeff
 80029b0:	fffffdff 	.word	0xfffffdff

080029b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4393      	bics	r3, r2
 80029cc:	001a      	movs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a9c <TIM_OC2_SetConfig+0xe8>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa0 <TIM_OC2_SetConfig+0xec>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4393      	bics	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <TIM_OC2_SetConfig+0xf0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10d      	bne.n	8002a32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	4393      	bics	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa4 <TIM_OC2_SetConfig+0xf0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <TIM_OC2_SetConfig+0x9e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <TIM_OC2_SetConfig+0xf4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <TIM_OC2_SetConfig+0x9e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	@ (8002aac <TIM_OC2_SetConfig+0xf8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <TIM_OC2_SetConfig+0x9e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <TIM_OC2_SetConfig+0xfc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4a17      	ldr	r2, [pc, #92]	@ (8002ab4 <TIM_OC2_SetConfig+0x100>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	@ (8002ab8 <TIM_OC2_SetConfig+0x104>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	621a      	str	r2, [r3, #32]
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b006      	add	sp, #24
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	ffff8fff 	.word	0xffff8fff
 8002aa0:	fffffcff 	.word	0xfffffcff
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40014400 	.word	0x40014400
 8002ab0:	40014800 	.word	0x40014800
 8002ab4:	fffffbff 	.word	0xfffffbff
 8002ab8:	fffff7ff 	.word	0xfffff7ff

08002abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a33      	ldr	r2, [pc, #204]	@ (8002ba0 <TIM_OC3_SetConfig+0xe4>)
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2270      	movs	r2, #112	@ 0x70
 8002ae8:	4393      	bics	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2203      	movs	r2, #3
 8002af0:	4393      	bics	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4a28      	ldr	r2, [pc, #160]	@ (8002ba4 <TIM_OC3_SetConfig+0xe8>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a24      	ldr	r2, [pc, #144]	@ (8002ba8 <TIM_OC3_SetConfig+0xec>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <TIM_OC3_SetConfig+0xf0>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <TIM_OC3_SetConfig+0xf4>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <TIM_OC3_SetConfig+0xec>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00b      	beq.n	8002b56 <TIM_OC3_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb4 <TIM_OC3_SetConfig+0xf8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <TIM_OC3_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb8 <TIM_OC3_SetConfig+0xfc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <TIM_OC3_SetConfig+0x9a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <TIM_OC3_SetConfig+0x100>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d113      	bne.n	8002b7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <TIM_OC3_SetConfig+0x104>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <TIM_OC3_SetConfig+0x108>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fffffeff 	.word	0xfffffeff
 8002ba4:	fffffdff 	.word	0xfffffdff
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	fffff7ff 	.word	0xfffff7ff
 8002bb0:	fffffbff 	.word	0xfffffbff
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	ffffefff 	.word	0xffffefff
 8002bc4:	ffffdfff 	.word	0xffffdfff

08002bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a26      	ldr	r2, [pc, #152]	@ (8002c78 <TIM_OC4_SetConfig+0xb0>)
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <TIM_OC4_SetConfig+0xb4>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <TIM_OC4_SetConfig+0xb8>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c84 <TIM_OC4_SetConfig+0xbc>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	031b      	lsls	r3, r3, #12
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <TIM_OC4_SetConfig+0xc0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_OC4_SetConfig+0x78>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <TIM_OC4_SetConfig+0xc4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_OC4_SetConfig+0x78>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <TIM_OC4_SetConfig+0xc8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC4_SetConfig+0x78>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <TIM_OC4_SetConfig+0xcc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4a15      	ldr	r2, [pc, #84]	@ (8002c98 <TIM_OC4_SetConfig+0xd0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b006      	add	sp, #24
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	ffffefff 	.word	0xffffefff
 8002c7c:	ffff8fff 	.word	0xffff8fff
 8002c80:	fffffcff 	.word	0xfffffcff
 8002c84:	ffffdfff 	.word	0xffffdfff
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800
 8002c98:	ffffbfff 	.word	0xffffbfff

08002c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	221f      	movs	r2, #31
 8002cac:	4013      	ands	r3, r2
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	0013      	movs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	211f      	movs	r1, #31
 8002ccc:	400b      	ands	r3, r1
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4099      	lsls	r1, r3
 8002cd2:	000b      	movs	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b006      	add	sp, #24
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223c      	movs	r2, #60	@ 0x3c
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e047      	b.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	223c      	movs	r2, #60	@ 0x3c
 8002d00:	2101      	movs	r1, #1
 8002d02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	223d      	movs	r2, #61	@ 0x3d
 8002d08:	2102      	movs	r1, #2
 8002d0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2270      	movs	r2, #112	@ 0x70
 8002d20:	4393      	bics	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00f      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d009      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10c      	bne.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	4393      	bics	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	223d      	movs	r2, #61	@ 0x3d
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223c      	movs	r2, #60	@ 0x3c
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223c      	movs	r2, #60	@ 0x3c
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e03e      	b.n	8002e3a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223c      	movs	r2, #60	@ 0x3c
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	22ff      	movs	r2, #255	@ 0xff
 8002dc8:	4393      	bics	r3, r2
 8002dca:	001a      	movs	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002dd8:	401a      	ands	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a18      	ldr	r2, [pc, #96]	@ (8002e48 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002de6:	401a      	ands	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a16      	ldr	r2, [pc, #88]	@ (8002e4c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002df4:	401a      	ands	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002e02:	401a      	ands	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002e10:	401a      	ands	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002e1e:	401a      	ands	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	223c      	movs	r2, #60	@ 0x3c
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	fffffcff 	.word	0xfffffcff
 8002e48:	fffffbff 	.word	0xfffffbff
 8002e4c:	fffff7ff 	.word	0xfffff7ff
 8002e50:	ffffefff 	.word	0xffffefff
 8002e54:	ffffdfff 	.word	0xffffdfff
 8002e58:	ffffbfff 	.word	0xffffbfff

08002e5c <memset>:
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	1882      	adds	r2, r0, r2
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <memset+0xa>
 8002e64:	4770      	bx	lr
 8002e66:	7019      	strb	r1, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e7f9      	b.n	8002e60 <memset+0x4>

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	2600      	movs	r6, #0
 8002e70:	4c0c      	ldr	r4, [pc, #48]	@ (8002ea4 <__libc_init_array+0x38>)
 8002e72:	4d0d      	ldr	r5, [pc, #52]	@ (8002ea8 <__libc_init_array+0x3c>)
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	42a6      	cmp	r6, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	f000 f819 	bl	8002eb4 <_init>
 8002e82:	4c0a      	ldr	r4, [pc, #40]	@ (8002eac <__libc_init_array+0x40>)
 8002e84:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb0 <__libc_init_array+0x44>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	00b3      	lsls	r3, r6, #2
 8002e92:	58eb      	ldr	r3, [r5, r3]
 8002e94:	4798      	blx	r3
 8002e96:	3601      	adds	r6, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	00b3      	lsls	r3, r6, #2
 8002e9c:	58eb      	ldr	r3, [r5, r3]
 8002e9e:	4798      	blx	r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	08002f1c 	.word	0x08002f1c
 8002ea8:	08002f1c 	.word	0x08002f1c
 8002eac:	08002f20 	.word	0x08002f20
 8002eb0:	08002f1c 	.word	0x08002f1c

08002eb4 <_init>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr

08002ec0 <_fini>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr
